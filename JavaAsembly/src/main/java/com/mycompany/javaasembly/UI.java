/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.javaasembly;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dylan
 */
public class UI extends javax.swing.JFrame {
    
    private List<String> file;
    private int index = 0;
    private int memoryAt = 10;
    private String memory = "";
    private String binary = "";
    
    private int PC = 0;
    private int IR = 0;
    private int AC = 0;
    private int AX = 0;
    private int BX = 0;
    private int CX = 0;
    private int DX = 0;
    
    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Limpiar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cerrar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"                 PC", null},
                {"                 IR", null},
                {"                 AC", null},
                {"                 AX", null},
                {"                 BX", null},
                {"                 CX", null},
                {"                 DX", null}
            },
            new String [] {
                "Registros", "Valores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
        }

        jButton5.setText("Cargar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "#", "Memoria"
            }
        ));
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(50);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jButton5)
                            .addComponent(jButton3))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        jTextField1.setText(filename);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            file = Files.readAllLines(Paths.get(jTextField1.getText()));
        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(file);
        jTable2.setValueAt("", 0, 1);
        jTable2.setValueAt("", 1, 1);
        jTable2.setValueAt("", 2, 1);
        jTable2.setValueAt("", 3, 1);
        jTable2.setValueAt("", 4, 1);
        jTable2.setValueAt("", 5, 1);
        jTable2.setValueAt("", 6, 1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String line = file.get(index).toLowerCase();
        System.out.println(line);
        index ++;
        String[] steps = line.split(" ");
        switch(steps[0]){
            case "load" -> load(steps[1]);
            case "store" -> store(steps[1]);
            case "mov" -> mov(steps[1], Integer.parseInt(steps[2]));
            case "sub" -> sub(steps[1]);
            case "add" -> add(steps[1]);
            default -> {
                JOptionPane.showMessageDialog(this, "Invalid Data Entered");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTable2.setValueAt("", 2, 1);
        jTable2.setValueAt("", 3, 1);
        jTable2.setValueAt("", 4, 1);
        jTable2.setValueAt("", 5, 1);
        jTable2.setValueAt("", 6, 1);
        jTextField1.setText("");
        index = 0;
        memoryAt = 10;
        memory = "";
        file.clear();
        DefaultTableModel dm = (DefaultTableModel)jTable1.getModel();
        while(dm.getRowCount() > 0)
        {
            dm.removeRow(0);
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private String binaryValue(int pValue){
        binary = "";
        binary = Integer.toBinaryString(pValue);
        while(binary.length() <= 8){
            binary = "0" + binary;
        }
        return binary;
    }
    
    private void load(String pRegister){
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        switch(pRegister){
            case "ax":
                AC = AX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0001 0001 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "bx":
                AC = BX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0001 0010 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "cx":
                AC = CX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0001 0011 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "dx":
                AC = DX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0001 0100 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            default:
                JOptionPane.showMessageDialog(this, "Invalid Data Entered");
        }
        memoryAt++;
    }
    
    private void store(String pRegister){
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        switch(pRegister){
            case "ax":
                AX = AC;
                jTable2.setValueAt(AX, 3, 1);
                memory = "0010 0001 " + binaryValue(AX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "bx":
                BX = AC;
                jTable2.setValueAt(BX, 4, 1);
                memory = "0010 0010 " + binaryValue(BX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "cx":
                CX = AC;
                jTable2.setValueAt(CX, 5, 1);
                memory = "0010 0011 " + binaryValue(CX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "dx":
                DX = AC;
                jTable2.setValueAt(DX, 6, 1);
                memory = "0010 0100 " + binaryValue(DX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            default:
                JOptionPane.showMessageDialog(this, "Invalid Data Entered"); 
        }
        memoryAt++;
    }
    
    private void mov(String pRegister, int pValue){
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        switch(pRegister){
            case "ax":
                AX = pValue;
                jTable2.setValueAt(AX, 3, 1);
                memory = "0011 0001 " + binaryValue(AX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "bx":
                BX = pValue;
                jTable2.setValueAt(BX, 4, 1);
                memory = "0011 0010 " + binaryValue(BX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "cx":
                CX = pValue;
                jTable2.setValueAt(CX, 5, 1);
                memory = "0011 0011 " + binaryValue(CX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "dx":
                DX = pValue;
                jTable2.setValueAt(DX, 6, 1);
                memory = "0011 0100 " + binaryValue(DX);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            default:
                JOptionPane.showMessageDialog(this, "Invalid Data Entered");
        }
        memoryAt++;
    }
    
    private void sub(String pRegister){
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        switch(pRegister){
            case "ax":
                AC -= AX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0100 0001 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "bx":
                AC -= BX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0100 0010 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "cx":
                AC -= CX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0100 0011 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "dx":
                AC -= DX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0100 0100 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            default:
                JOptionPane.showMessageDialog(this, "Invalid Data Entered");
        }
        memoryAt++;
    }
    
    private void add(String pRegister){
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        switch(pRegister){
            case "ax":
                AC += AX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0101 0001 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "bx":
                AC += BX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0101 0010 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "cx":
                AC += CX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0101 0011 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            case "dx":
                AC += DX;
                jTable2.setValueAt(AC, 2, 1);
                memory = "0101 0100 " + binaryValue(AC);
                model.addRow(new Object[]{memoryAt, memory});
                break;
            default:
                JOptionPane.showMessageDialog(this, "Invalid Data Entered");
        }
        memoryAt++;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
